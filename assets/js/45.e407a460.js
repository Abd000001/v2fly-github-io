(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{432:function(t,e,a){"use strict";a.r(e);var s=a(11),o=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"websocket"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#websocket"}},[t._v("#")]),t._v(" WebSocket")]),t._v(" "),a("p",[t._v("使用标准的 WebSocket 来传输数据。WebSocket 连接可以被其它 HTTP 服务器（如 Nginx）分流，也可以被 VLESS fallbacks path 分流。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Websocket 会识别 HTTP 请求的 X-Forwarded-For 头来覆写流量的源地址，优先级高于 PROXY protocol。")])]),t._v(" "),a("h2",{attrs:{id:"websocketobject"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#websocketobject"}},[t._v("#")]),t._v(" WebSocketObject")]),t._v(" "),a("p",[a("code",[t._v("WebSocketObject")]),t._v(" 对应传输配置的 "),a("code",[t._v("wsSettings")]),t._v(" 项。")]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"acceptProxyProtocol"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"path"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"headers"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"Host"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"v2ray.com"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"maxEarlyData"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"useBrowserForwarding"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"earlyDataHeaderName"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("blockquote",[a("p",[a("code",[t._v("acceptProxyProtocol")]),t._v(": true | false")])]),t._v(" "),a("p",[t._v("v4.27.1+，仅用于 inbound，是否接收 PROXY protocol，默认值为 "),a("code",[t._v("false")]),t._v("。填写 "),a("code",[t._v("true")]),t._v(" 时，最底层 TCP 连接建立后，请求方必须先发送 PROXY protocol v1 或 v2，否则连接会被关闭。")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://www.haproxy.org/download/2.2/doc/proxy-protocol.txt",target:"_blank",rel:"noopener noreferrer"}},[t._v("PROXY protocol"),a("OutboundLink")],1),t._v(" 专用于传递请求的真实来源 IP 和端口，"),a("strong",[t._v("若你不了解它，请先忽略该项")]),t._v("。常见的反代软件（如 HAProxy、Nginx）都可以配置发送它，VLESS fallbacks xver 也可以发送它。")]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("path")]),t._v(" string")])]),t._v(" "),a("p",[t._v("WebSocket 所使用的 HTTP 协议路径，默认值为 "),a("code",[t._v('"/"')]),t._v("。")]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("headers")]),t._v(": map {string: string}")])]),t._v(" "),a("p",[t._v("自定义 HTTP 头，一个键值对，每个键表示一个 HTTP 头的名称，对应的值是字符串。默认值为空。")]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("maxEarlyData")]),t._v(": number")])]),t._v(" "),a("p",[t._v("所要发送的前置数据的最长长度。用于减少连接建立的时间。(v4.37.0+)")]),t._v(" "),a("p",[t._v("数据会以 Base64 RawURLEncoding 的形式附加在 path 之后，转发时需要根据前缀进行匹配。")]),t._v(" "),a("p",[t._v("如果设置 "),a("code",[t._v("earlyDataHeaderName")]),t._v(" 则会将前置数据放置于该 HTTP 头。(v4.39.0+)")]),t._v(" "),a("p",[t._v("对于接收端，设置为任何非 0 数值都代表启用前置数据支持。")]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("useBrowserForwarding")]),t._v(": true | false")])]),t._v(" "),a("p",[t._v("是否启用浏览器转发。如果启用浏览器转发，相应的 WebSockets 连接就会经过浏览器转发模块进行转发后再发送至互联网。(v4.37.0+)")]),t._v(" "),a("p",[t._v("v4.37.0+ 服务器端程序会自动适配客户端的浏览器转发功能，无需额外设置。")]),t._v(" "),a("p",[t._v('只兼容基于基于路径的前置数据或者 HTTP 头的名字为 "Sec-WebSocket-Protocol" 的启用基于 HTTP 头的前置数据。')]),t._v(" "),a("p",[t._v("相关配置请参考浏览器转发模块文档。"),a("RouterLink",{attrs:{to:"/config/browserforwarder.html"}},[t._v("BrowserForwarderObject")])],1),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("earlyDataHeaderName")]),t._v(" :  string")])]),t._v(" "),a("p",[t._v("发送的前置数据的 HTTP 头的名字，设置后启用基于 HTTP 头的前置数据。如果留空则使用基于路径的前置数据。(v4.39.0+)")]),t._v(" "),a("p",[t._v('当且仅当 HTTP 头的名字为 "Sec-WebSocket-Protocol" 时可以启用基于 HTTP 头的前置数据浏览器转发功能。')]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("V2Ray 的 WebSocket 前置数据实现已经完成与其他项目的兼容，正确设置后可以连接其他实现的服务器端。")]),t._v(" "),a("p",[t._v("其他项目的客户端可能无法连接 V2Ray 服务器端。")])])])}),[],!1,null,null,null);e.default=o.exports}}]);