(window.webpackJsonp=window.webpackJsonp||[]).push([[130],{330:function(e,t,o){"use strict";o.r(t);var r=o(0),v=Object(r.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h1",{attrs:{id:"websocket"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#websocket"}},[e._v("#")]),e._v(" WebSocket")]),e._v(" "),o("h2",{attrs:{id:"websocket-stream"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#websocket-stream"}},[e._v("#")]),e._v(" WebSocket Stream")]),e._v(" "),o("p",[e._v("stream.ws")]),e._v(" "),o("blockquote",[o("p",[o("code",[e._v("acceptProxyProtocol")]),e._v(": true | false")])]),e._v(" "),o("p",[e._v("仅用于入站，是否接收 Proxy Protocol，默认值为 "),o("code",[e._v("false")]),e._v("。该值为 "),o("code",[e._v("true")]),e._v(" 时，底层 TCP 连接建立后，请求方必须先发送 Proxy Protocol，否则连接将被关闭。")]),e._v(" "),o("p",[o("a",{attrs:{href:"https://www.haproxy.org/download/2.2/doc/proxy-protocol.txt",target:"_blank",rel:"noopener noreferrer"}},[e._v("Proxy Protocol"),o("OutboundLink")],1),e._v(" 用于传递请求的真实来源 IP 和端口。")]),e._v(" "),o("blockquote",[o("p",[o("code",[e._v("path")]),e._v(": string")])]),e._v(" "),o("p",[e._v("WebSocket 所使用的 HTTP 协议路径，默认值为 "),o("code",[e._v('"/"')]),e._v("。")]),e._v(" "),o("blockquote",[o("p",[o("code",[e._v("headers")]),e._v(": map {string: string}")])]),e._v(" "),o("p",[e._v("自定义 HTTP 头，一个键值对，每个键表示一个 HTTP 头的名称，对应的值是字符串。默认值为空。")]),e._v(" "),o("blockquote",[o("p",[o("code",[e._v("maxEarlyData")]),e._v(": number")])]),e._v(" "),o("p",[e._v("所要发送的前置数据的最长长度。用于减少连接建立的时间。\n数据会以 Base64 RawURLEncoding 的形式附加在 path 之后，转发时需要根据前缀进行匹配。")]),e._v(" "),o("p",[e._v("如果设置 "),o("code",[e._v("earlyDataHeaderName")]),e._v(" 则会将前置数据放置于该 HTTP 头。")]),e._v(" "),o("p",[e._v("对于接收端，设置为任何非 0 数值都代表启用前置数据支持。")]),e._v(" "),o("blockquote",[o("p",[o("code",[e._v("useBrowserForwarding")]),e._v(": true | false")])]),e._v(" "),o("p",[e._v("是否启用浏览器转发。如果启用浏览器转发，相应的 WebSockets 连接就会经过浏览器转发模块进行转发后再发送至互联网。")]),e._v(" "),o("p",[e._v("v4.37.0+ 服务器端程序会自动适配客户端的浏览器转发功能，无需额外设置。")]),e._v(" "),o("p",[e._v('只兼容基于基于路径的前置数据或者 HTTP 头的名字为 "Sec-WebSocket-Protocol" 的启用基于 HTTP 头的前置数据。')]),e._v(" "),o("p",[e._v("相关配置请参考浏览器转发模块文档。"),o("RouterLink",{attrs:{to:"/v5/config/service/browser.html"}},[e._v("service.browser")])],1),e._v(" "),o("blockquote",[o("p",[o("code",[e._v("earlyDataHeaderName")]),e._v(": string")])]),e._v(" "),o("p",[e._v("发送的前置数据的 HTTP 头的名字，设置后启用基于 HTTP 头的前置数据。如果留空则使用基于路径的前置数据。")]),e._v(" "),o("p",[e._v('当且仅当 HTTP 头的名字为 "Sec-WebSocket-Protocol" 时可以启用基于 HTTP 头的前置数据浏览器转发功能。')]),e._v(" "),o("div",{staticClass:"custom-block tip"},[o("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),o("p",[e._v("V2Ray 的 WebSocket 前置数据实现已经完成与其他项目的兼容，正确设置后可以连接其他实现的服务器端。")]),e._v(" "),o("p",[e._v("其他项目的客户端可能无法连接 V2Ray 服务器端。")])])])}),[],!1,null,null,null);t.default=v.exports}}]);