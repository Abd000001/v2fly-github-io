(window.webpackJsonp=window.webpackJsonp||[]).push([[127],{327:function(t,e,a){"use strict";a.r(e);var v=a(0),o=Object(v.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"router-路由"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#router-路由"}},[t._v("#")]),t._v(" Router 路由")]),t._v(" "),a("p",[t._v("service.router")]),t._v(" "),a("p",[t._v("V2Ray 内建了一个路由模块，可以将入站数据按需求由不同的出站连接发出，以达到按需代理的目的。这一功能的常见用法是分流国内外流量。V2Ray 可以通过内部机制判断不同国家或地区的流量，然后将它们发送到不同的出站代理。")]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"domainStrategy"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"AsIs"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"rule"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"balancingRule"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("blockquote",[a("p",[a("code",[t._v("domainStrategy")]),t._v(": "),a("code",[t._v("AsIs")]),t._v(" | "),a("code",[t._v("UseIp")]),t._v(" | "),a("code",[t._v("IpIfNonMatch")]),t._v(" | "),a("code",[t._v("IpOnDemand")])])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("AsIs")]),t._v("：只使用域名进行路由选择，默认值；")]),t._v(" "),a("li",[a("code",[t._v("IPIfNonMatch")]),t._v("：当域名没有匹配任何基于域名的规则时，将域名解析成 IP（A 记录或 AAAA 记录），进行基于 IP 规则的匹配；\n"),a("ul",[a("li",[t._v("当一个域名有多个 IP 地址时，会尝试匹配所有的 IP 地址，直到其中一个与某个 IP 规则匹配为止；")]),t._v(" "),a("li",[t._v("解析后的 IP 仅在路由选择时起作用，转发的数据包中依然使用原始域名。")])])]),t._v(" "),a("li",[a("code",[t._v("IPOnDemand")]),t._v("：当匹配时碰到任何基于 IP 的规则，立即将域名解析为 IP 进行匹配。")])]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("rule")]),t._v(": [ "),a("a",{attrs:{href:"#RuleObject"}},[t._v("RuleObject")]),t._v(" ]")])]),t._v(" "),a("p",[t._v("对应一个数组，数组中每一项是一个规则。对于每一个连接，路由将根据这些规则依次进行判断，当一个规则生效时，即将这个连接转发至它所指定的 "),a("code",[t._v("outboundTag")]),t._v(" 或 "),a("code",[t._v("balancingTag")]),t._v("。当没有匹配到任何规则时，流量默认被转发至第一个 "),a("code",[t._v("outbound")]),t._v("。")]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("balancingRule")]),t._v(": [ "),a("a",{attrs:{href:"#BalancingRuleObject"}},[t._v("BalancingRuleObject")]),t._v(" ]")])]),t._v(" "),a("p",[t._v("一个数组，数组中每一项是一个负载均衡器的配置。当一个规则指向一个负载均衡器时，V2Ray 会通过此负载均衡器选出一个 "),a("code",[t._v("outbound")]),t._v("，然后由它转发流量。")]),t._v(" "),a("h2",{attrs:{id:"ruleobject"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ruleobject"}},[t._v("#")]),t._v(" RuleObject")]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("tag")]),t._v(": string")])]),t._v(" "),a("p",[t._v("对应一个额外 "),a("RouterLink",{attrs:{to:"/v5/config/outbounds.html"}},[t._v("出站连接配置")]),t._v(" 的标识。")],1),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("balancingTag")]),t._v(": string")])]),t._v(" "),a("p",[t._v("对应一个负载均衡器的标识。"),a("code",[t._v("balancerTag")]),t._v(" 和 "),a("code",[t._v("tag")]),t._v(" 须二选一。当同时指定时，"),a("code",[t._v("tag")]),t._v(" 生效。")]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("domain")]),t._v(":")])]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("geoip")]),t._v(" :")])]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("portList")]),t._v(": string")])]),t._v(" "),a("p",[t._v("目标端口范围，有三种形式：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("a-b")]),t._v("：a 和 b 均为正整数，且小于 65536。这个范围是一个前后闭合区间，当端口落在此范围内时，此规则生效。")]),t._v(" "),a("li",[a("code",[t._v("a")]),t._v("：a 为正整数，且小于 65536。当目标端口为 a 时，此规则生效。")]),t._v(" "),a("li",[t._v('以上两种形式的混合，以逗号 "," 分隔。形如：'),a("code",[t._v("53,443,1000-2000")]),t._v("。")])]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("networks")]),t._v(': "tcp" | "udp" | "tcp,udp"')])]),t._v(" "),a("p",[t._v('可选的值有 "tcp"、"udp" 或 "tcp,udp"，当连接方式是指定的方式时，此规则生效。')]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("sourceGeoip")])])]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("sourcePortList")]),t._v(": string")])]),t._v(" "),a("p",[t._v("来源端口范围，格式与 "),a("code",[t._v("portList")]),t._v(" 相同。")]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("userEmail")]),t._v(": [ string ]")])]),t._v(" "),a("p",[t._v("一个数组，数组内每一项是一个邮箱地址。当某一项匹配来源用户时，此规则生效。")]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("inboundTag")]),t._v(": [ string ]")])]),t._v(" "),a("p",[t._v("一个数组，数组内每一项是一个标识。当某一项匹配入站协议的标识时，此规则生效。")]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("protocol")]),t._v(': [ "http" | "tls" | "bittorrent" ]')])]),t._v(" "),a("p",[t._v("一个数组，数组内每一项表示一种协议。当某一个协议匹配当前连接的流量时，此规则生效。必须开启入站代理中的 "),a("code",[t._v("sniffing")]),t._v(" 选项。")]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("domainMatcher")]),t._v(': "linear" | "mph"')])]),t._v(" "),a("p",[t._v("选择要使用的域名匹配算法。此处 "),a("code",[t._v("domainMatcher")]),t._v(" 的优先级高于 "),a("code",[t._v("RoutingObject")]),t._v(" 配置的 "),a("code",[t._v("domainMatcher")]),t._v("。")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("linear")]),t._v("：使用线性匹配算法，默认值；")]),t._v(" "),a("li",[a("code",[t._v("mph")]),t._v("：使用最小完美散列（minimal perfect hash）算法。\n"),a("ul",[a("li",[t._v("测试数据约 17 万条，匹配速度提升约 30%，内存占用减少约 15%")])])])]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("geoDomain")]),t._v(" :")])]),t._v(" "),a("h2",{attrs:{id:"balancingruleobject"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#balancingruleobject"}},[t._v("#")]),t._v(" BalancingRuleObject")]),t._v(" "),a("p",[t._v("负载均衡器配置。当一个负载均衡器生效时，它会从指定的出站协议中，按配置选出一个最合适的出站协议，进行流量转发。")]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"tag"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"balancer"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"selector"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"strategy"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"random"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("blockquote",[a("p",[a("code",[t._v("tag")]),t._v(": string")])]),t._v(" "),a("p",[t._v("此负载均衡器的标识，用于匹配 "),a("code",[t._v("RuleObject")]),t._v(" 中的 "),a("code",[t._v("balancerTag")]),t._v("。")]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("outboundSelector")]),t._v(": [ string ]")])]),t._v(" "),a("p",[t._v("一个字符串数组，其中每一个字符串将用于和出站协议标识的前缀匹配。在以下几个出站协议标识中："),a("code",[t._v('[ "a", "ab", "c", "ba" ]')]),t._v("，"),a("code",[t._v('"outboundSelector": ["a"]')]),t._v(" 将匹配到 "),a("code",[t._v('[ "a", "ab" ]')]),t._v("。")]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("strategy")]),t._v(': "random" | "leastping" | "leastload"')])]),t._v(" "),a("p",[t._v("进行负载均衡的策略类型。")]),t._v(" "),a("p",[t._v("可以填入的类型包括 "),a("code",[t._v("random")]),t._v(" 、"),a("code",[t._v("leastping")]),t._v(" 以及 "),a("code",[t._v("leastload")]),t._v("。")]),t._v(" "),a("blockquote",[a("p",[t._v("strategySettings: "),a("a",{attrs:{href:"#StrategySettingsObject"}},[t._v("StrategySettingsObject")])])]),t._v(" "),a("blockquote",[a("p",[t._v("fallbackTag: string")])]),t._v(" "),a("h3",{attrs:{id:"strategysettingsobject"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#strategysettingsobject"}},[t._v("#")]),t._v(" StrategySettingsObject")])])}),[],!1,null,null,null);e.default=o.exports}}]);